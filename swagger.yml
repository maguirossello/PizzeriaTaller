openapi: 3.0.0
info:
  title: "RP Flask REST API"
  description: "An API about people and pizzas"
  version: "1.0.0"

servers:
  - url: "/api"

components:
  schemas:
    Person:
      type: "object"
      required:
        - lname
      properties:
        fname:
          type: "string"
        lname:
          type: "string"
  parameters:
    lname:
      name: "lname"
      description: "Last name of the person to get"
      in: path
      required: True
      schema:
        type: "string"
    pizza_id:
      name: "pizza_id"
      description: "ID of the pizza"
      in: path
      required: true
      schema:
        type: "integer"

paths:
  /people:
    get:
      operationId: "people.read_all"
      tags:
        - "People"
      summary: "Read the list of people"
      responses:
        "200":
          description: "Successfully read people list"
    post:
      operationId: "people.create"
      tags:
        - People
      summary: "Create a person"
      requestBody:
          description: "Person to create"
          required: True
          content:
            application/json:
              schema:
                x-body-name: "person"
                $ref: "#/components/schemas/Person"
      responses:
        "201":
          description: "Successfully created person"
  /people/{lname}:
    get:
      operationId: "people.read_one"
      tags:
        - People
      summary: "Read one person"
      parameters:
        - $ref: "#/components/parameters/lname"
      responses:
        "200":
          description: "Successfully read person"
    put:
      tags:
        - People
      operationId: "people.update"
      summary: "Update a person"
      parameters:
        - $ref: "#/components/parameters/lname"
      responses:
        "200":
          description: "Successfully updated person"
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: "person"
              $ref: "#/components/schemas/Person"
    delete:
      tags:
        - People
      operationId: "people.delete"
      summary: "Delete a person"
      parameters:
        - $ref: "#/components/parameters/lname"
      responses:
        "204":
          description: "Successfully deleted person"
  /pizzas:
    post:
      operationId: "pizzas.create"
      tags:
        - Pizzas
      summary: "Create a pizza associated with a person"
      requestBody:
          description: "Pizza to create"
          required: True
          content:
            application/json:
              schema:
                x-body-name: "pizza"
                type: "object"
                properties:
                  person_id:
                    type: "integer"
                  content:
                    type: "string"
      responses:
        "201":
          description: "Successfully created a pizza"
  /pizzas/{pizza_id}:
    get:
      operationId: "pizzas.read_one"
      tags:
        - Pizzas
      summary: "Read one pizza"
      parameters:
        - $ref: "#/components/parameters/pizza_id"
      responses:
        "200":
          description: "Successfully read one pizza"
    put:
      tags:
        - Pizzas
      operationId: "pizzas.update"
      summary: "Update a pizza"
      parameters:
        - $ref: "#/components/parameters/pizza_id"
      responses:
        "200":
          description: "Successfully updated pizza"
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: "pizza"
              type: "object"
              properties:
                content:
                  type: "string"
    delete:
      tags:
        - Pizzas
      operationId: "pizzas.delete"
      summary: "Delete a pizza"
      parameters:
        - $ref: "#/components/parameters/pizza_id"
      responses:
        "204":
          description: "Successfully deleted pizza"
